#include <iostream>
using namespace std;

class Matrix
{
    public:
        int rows;
        int columns;
        float * values;
        
        Matrix(int row_number, int column_number, float * mat_values)
        {
            rows=row_number;
            columns=column_number;
            values=mat_values;
        }

        float select(int row, int column)
        {
            return values[(row-1)*columns+(column-1)];
        }

        void redefine(float*);
        Matrix operator+(Matrix);
        Matrix operator-(Matrix);
        Matrix scale (float);
        Matrix operator*(Matrix);
};

//matrix subtraction helper function
float * m_sub_helper(float * A, float * B, int elements) {
	float * C;
	C = new float[elements];
	for (int i = 0; i < elements; i++) {
		C[i] = A[i] - B[i];
	}
	delete C;
	return C;
}

//scalar multiplication helper function
float * s_mult_helper(float * A, float rho, int elements) {
	float * C;
	C = new float[elements];
	for (int i = 0; i < elements; i++) {
		C[i] = A[i] * rho;
	}
	delete C;
	return C;
}

//matrix multiplication helper function
float * m_mult_helper(float * A, float * B, int m, int n, int p) {
	float * C;
	C=new float[m*p];
	for (int i = 0;  i < m; i++)
	{
		for (int j = 0; j < p; j++)
		{
			C[i*p + j] = 0;
			for (int k = 0; k < n; k++) 
			{
				C[i*p + j] += A[i*n + k] * B[j + p * k];
			}
		}
	}
	delete C;
	return C;
}

//matrix addition helper function
float * m_add_helper(float * A, float * B, int elements) {
	float * C;
	C = new float[elements];
	for (int i = 0; i < elements; i++) {
		C[i] = A[i] + B[i];
	}
	delete C;
	return C;
}

//matrix multiplication
Matrix Matrix::operator*(Matrix B)
{
    const int m=rows;
    const int p=B.columns;
    const int n=columns;
    float * new_values;
    if (columns==B.rows)
    {
        new_values=m_mult_helper(values, B.values, m, n, p);
    }
    return Matrix(m, p, new_values);
}

//matrix addition function
Matrix Matrix::operator+(Matrix B)
{
    const int m_a=rows;
    const int n_b=B.columns;
    const int n_a=columns;
    const int m_b=B.rows;
    float * new_values;
    if ((m_a==m_b)&&(n_a==n_b))
    {
        new_values=m_add_helper(values, B.values, m_a*n_a);
    }
    return Matrix(m_a, n_a, new_values);
}

//scalar multiplication function
Matrix Matrix :: scale(float k)
{
    float * new_values;
    new_values=s_mult_helper(values, k, rows*columns);
    return Matrix(rows, columns, new_values);
}

//matrix subtraction function
Matrix Matrix::operator-(Matrix B)
{
    const int m_a=rows;
    const int n_b=B.columns;
    const int n_a=columns;
    const int m_b=B.rows;
    float * new_values;
    if ((m_a==m_b)&&(n_a==n_b))
    {
        new_values=m_sub_helper(values, B.values, m_a*n_a);
    }
    return Matrix(m_a, n_a, new_values);
}

void Matrix:: redefine(float* update_values)
{
    values=update_values;
}

void display_matrix(Matrix A)
{
    for (int i=0; i<A.rows; i++)
    {
        for (int j = 0; j < A.columns; j++)
        {
            cout << A.select(i+1,j+1) << "    ";
        }
        cout << "\n";
    }
}


int main()
{
    float a_values [9] ={1, 0, 1, 0, 1, 1, 1, 0, 1};
    float b_values [9] ={3, 0, 2, 2, 1, 3, 2, 2, -1};
    Matrix A=Matrix(3, 3, a_values);
    Matrix B=Matrix(3, 3, b_values);
    
    float d_values [6]= {-3, -10, 7, 2, 5, 0};
    Matrix D=Matrix(3, 2, d_values);
    Matrix E=(A+B)*D;
    display_matrix(E);

    return 0;
}